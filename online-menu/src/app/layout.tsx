"use client"
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import "../styles/Header.css";
import { create } from 'zustand'

import React, { Component, Suspense, lazy, useState, useEffect } from 'react'
import { isMobile } from 'react-device-detect';
import Header from './_components/Header';
// import MainPage from './Pages/MainPage';
// import Checkout from './Pages/Checkout';
import PriceFooter from './_components/PriceFooter';

// const User = lazy(() => import('./Pages/User'));
// const Login = lazy(() => import('./Pages/Login'));
// const ProductPage = lazy(() => import('./Pages/ProductPage'));

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

type StoreState = {
  checkout_products_list: any[];
  is_checkout_list_empty: boolean;
  setCheckoutProductsList: (newList: any[]) => void;
  setIsCheckoutListEmpty: (value: boolean) => void;
  add_product: (product: any, checkout_products_list: any[], is_checkout_list_empty: boolean) => void;
  remove_product: (product: any) => void;
};

const add_product = (product) =>{

  const { setCheckoutProductsList, setIsCheckoutListEmpty, checkout_products_list, is_checkout_list_empty } = useStore()

  let temporary_list = [...checkout_products_list]

  if(is_checkout_list_empty){
    let product_config = {
      code:product.code,
      amount:1,
      product_info:product
    }
    temporary_list.push(product_config)
  } else {
    let product_already_added = temporary_list.filter((item) => item.code === product.code)
    if(product_already_added.length === 0){
      let product_config = {
        code:product.code,
        amount:1,
        product_info:product
      }
      temporary_list.push(product_config)
    } else {
      product_already_added = product_already_added[0]
      product_already_added.amount += 1
      temporary_list = temporary_list.filter((item) => item.code !== product.code)
      temporary_list.push(product_already_added)
    }
  }
  setCheckoutProductsList(temporary_list);
  setIsCheckoutListEmpty(false);
}

const remove_product = (product) =>{
  const { setCheckoutProductsList, setIsCheckoutListEmpty, checkout_products_list } = useStore()

  let new_list: any[] = [];
  if(product === 'all'){
    setCheckoutProductsList(new_list);
  } else {
    let temporary_list = [...checkout_products_list]
    new_list = temporary_list.filter((item) => item.code !== product.code)
    setCheckoutProductsList(new_list);
  }

  if(new_list.length === 0){
    setIsCheckoutListEmpty(true);
  }
}

export const useStore = create<StoreState>((set) => ({
  checkout_products_list: [],
  is_checkout_list_empty: true,
  setCheckoutProductsList: (newList) => set({ checkout_products_list: newList }),
  setIsCheckoutListEmpty: (value) => set({ is_checkout_list_empty: value }),
  add_product: add_product,
  remove_product: remove_product,
}))

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  // Get the current pathname
  const pathname = window.location.pathname;
  const [is_checkout_list_empty, setIsCheckoutListEmpty] = useState(true);
  const [checkout_products_list, setCheckoutProductsList] = useState([]);

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <Header/>
        {children}
        {(is_checkout_list_empty === false && pathname !== '/login') && (is_checkout_list_empty === false && pathname !== '/checkout') &&
          <React.Fragment>
            {(isMobile && is_checkout_list_empty === false && pathname === '/') &&
              <PriceFooter products={checkout_products_list}/>
            }
            {!isMobile &&
              <PriceFooter products={checkout_products_list}/>
            }
          </React.Fragment>
        }
      </body>
    </html>
  );
}
